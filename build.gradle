buildscript {
	ext {
		springBootVersion = '1.5.13.BUILD-SNAPSHOT'
	}
	repositories {
		mavenCentral()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'org.springframework.boot'
apply plugin: 'war'
apply plugin: 'idea'
 
idea {
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")
    }
}

ext {
	applicationName = "yo-server"
	applicationVersion = "1.0.0.RELEASE"
	javaVersion = '1.8'
	gradleVersion = '2.10'
	queryDslVersion ='4.1.4'
	lombokVersion = '1.16.16'
	modelMapperVersion = '0.7.5'
	commonsFileuploadVersion = '1.3.1'
	quartzSchedulerVersion = '2.2.3'
	commonsExecVersion = '1.3'
	commonsCodecVersion = '1.10'
	commonsCofigurationVersion = '1.10'
	thymeleafVersion = '3.0.6.RELEASE'
}


jar {
	baseName = applicationName
	version = applicationVersion
}

war {
	baseName = applicationName
	version = applicationVersion
}

sourceCompatibility = javaVersion
targetCompatibility = javaVersion


repositories {
	mavenCentral()
	jcenter()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
}


configurations {
	compile.exclude module: "spring-boot-starter-parent"
	compile.exclude module: "spring-boot-starter-tomcat"
	compile.exclude module: "spring-boot-starter-jdbc"
    querydslapt
}

eclipse {
    classpath {
         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

dependencies {
	compile "org.springframework.boot:spring-boot-configuration-processor"
	compile "org.springframework.boot:spring-boot-starter-parent"
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-jetty"
    compile "org.springframework.boot:spring-boot-starter-thymeleaf"
	compile "org.springframework.boot:spring-boot-starter-websocket"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-cache"
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile group: 'org.springframework', name: 'springloaded', version: '1.2.4.RELEASE'
    compile "org.springframework:spring-context-support"
    compile "com.sun.mail:javax.mail"
    
    compile "org.springframework.security:spring-security-messaging:4.2.3.RELEASE"
    
	//compile "org.thymeleaf.extras:thymeleaf-extras-springsecurity4"	 
    /**
    * thymeleaf 3
    */
    compile "org.thymeleaf.extras:thymeleaf-extras-springsecurity4:3.0.2.RELEASE"
    compile "org.thymeleaf.extras:thymeleaf-extras-java8time:3.0.0.RELEASE"    
    compile "org.thymeleaf:thymeleaf-spring4:$thymeleafVersion"
    compile "org.thymeleaf:thymeleaf:$thymeleafVersion"
    compile "nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:2.2.2"
	compile "io.github.jpenren:thymeleaf-spring-data-dialect:3.3.0"
    
	
	/**
	 * http://www.querydsl.com/
	 * 쿼리와 닮은 Java 메서드를 이용해서 사용하는 프레임워크.
	 * xml 등으로 쿼리를 작성할 필요가 없음
     */
    compile "com.querydsl:querydsl-jpa:$queryDslVersion"
    compile ("com.querydsl:querydsl-apt:$queryDslVersion") {
    	exclude group: "com.google.guava"
    }
	
	/**
     * https://github.com/brettwooldridge/HikariCP
     * HikariCP
     */
    compile "com.zaxxer:HikariCP:2.7.8"
    /**
     * http://www.h2database.com
     * in-memory or file database 지원
     */
    compile "com.h2database:h2"
    
    compile "joda-time:joda-time"
    
	compile "org.projectlombok:lombok:$lombokVersion"
    compile "org.modelmapper:modelmapper:$modelMapperVersion"
   
   /**
    	https://github.com/FasterXML/jackson-datatype-hibernate
     */
    compile "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5"
    
    compile "commons-fileupload:commons-fileupload:$commonsFileuploadVersion"
   
   
	/**
     * http://commons.apache.org/proper/commons-codec/
     * Apache Commons Codec 
     */
    compile "org.apache.commons:commons-exec:$commonsExecVersion"
     
	compile "commons-codec:commons-codec:$commonsCodecVersion"
	
	compile "commons-io:commons-io:2.6"
	
	compile "org.apache.commons:commons-lang3:3.0"
	
	/**
     * http://commons.apache.org/proper/commons-configuration/
     * Apache Commons Configuration 
     */
	compile "commons-configuration:commons-configuration:$commonsCofigurationVersion"
	
	/**
	 * https://hc.apache.org/
	 * ApacheComponents HttpClient
	 */
	compile "org.apache.httpcomponents:httpcore"
	compile "org.apache.httpcomponents:httpclient"
	compile "org.apache.httpcomponents:httpmime"
	compile "org.apache.httpcomponents:fluent-hc:4.5.2"
	
	// https://mvnrepository.com/artifact/ch.simas.qlrm/qlrm
	compile group: 'ch.simas.qlrm', name: 'qlrm', version: '1.7.1'
	
	/**
	* yo
	*
	*/
	compile group: 'com.ibm.icu', name: 'icu4j', version: '61.1'
	
	
	/**
	 * http://flywaydb.org/
	 * FlywayDB: DB Schema version management tool
	 */
	compile "org.flywaydb:flyway-core:4.2.0"
	
	//compile("org.springframework.boot:spring-boot-devtools")
	
	
	runtime('com.h2database:h2')
	runtime('mysql:mysql-connector-java')
	
	compile 'junit:junit:4.+'
	
	testCompile group: 'junit', name: 'junit', version: '4.+'
	testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile "org.springframework.security:spring-security-test:4.2.3.RELEASE"
    
	//testCompile('org.springframework.boot:spring-boot-starter-test')
	//testCompile('org.springframework.security:spring-security-test')
}


//exclude common-logging
[configurations.runtime, configurations.default]*.exclude(module: 'commons-logging')

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

sourceSets {
    querydsl {
        java {
            srcDirs = ['src/main/querydsl']
        }
    }
}

eclipse {
	classpath {
		downloadSources = true
	}
}

task wrapper(type: Wrapper, description: 'Gradle wrapper initialization.') {
    gradleVersion = gradleVersion
}

task generateQueryDSL(type: JavaCompile, group: 'build', description: 'Generates the QueryDSL query types') {
    source = sourceSets.main.java
    classpath = configurations.compile + configurations.querydslapt
    options.compilerArgs = [
        '-proc:only', '-processor', 'com.querydsl.apt.jpa.JPAAnnotationProcessor'
    ]
    destinationDir = sourceSets.querydsl.java.srcDirs.iterator().next()
    dependencyCacheDir = compileJava.dependencyCacheDir
}
generateQueryDSL.mustRunAfter clean


compileJava {
	sourceCompatibility = javaVersion
	targetCompatibility = javaVersion
	dependsOn generateQueryDSL
    source generateQueryDSL.destinationDir
}

compileQuerydslJava {
	dependsOn generateQueryDSL
	options.warnings = false
	classpath += sourceSets.main.runtimeClasspath
}

compileTestJava {
	sourceCompatibility = javaVersion
	targetCompatibility = javaVersion
}

clean {
    delete sourceSets.querydsl.java.srcDirs
}

